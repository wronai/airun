[tool.poetry]
name = "airun"
version = "0.1.1"
description = "AI-Enhanced Universal Script Runner with automatic error fixing"
authors = ["Tom Sapletta <info@softreck.dev>"]
license = "Apache"
readme = "README.md"
homepage = "https://github.com/wronai/airun"
repository = "https://github.com/wronai/airun"
documentation = "https://airun.readthedocs.io"
keywords = ["ai", "automation", "scripting", "llm", "debugging"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Debuggers",
    "Topic :: System :: Shells",
    "Topic :: Utilities",
]
packages = [{include = "airun"}]

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.1.0"
pyyaml = "^6.0"
requests = "^2.31.0"
rich = "^13.7.0"
pydantic = "^2.5.0"
httpx = "^0.26.0"
asyncio-mqtt = {version = "^0.16.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.group.test.dependencies]
pytest-mock = "^3.12.0"
responses = "^0.24.0"
factory-boy = "^3.3.0"

[tool.poetry.extras]
mqtt = ["asyncio-mqtt"]
all = ["asyncio-mqtt"]

[tool.poetry.scripts]
airun = "airun.cli:main"
airun-config = "airun.cli:config_wizard"
airun-doctor = "airun.cli:doctor"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["airun"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=airun --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

[tool.coverage.run]
source = ["airun"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]